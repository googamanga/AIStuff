// Generated by CoffeeScript 1.6.2
(function() {
  beforeEach(function() {
    var matchers;

    matchers = {
      toBeBetween: function(center, range) {
        var actual, notText;

        actual = this.actual;
        notText = this.isNot ? " not" : "";
        this.message = function() {
          return "Expected " + actual + notText + " to be between " + (center - range / 2) + " and " + (center + range / 2);
        };
        return (((center - range / 2) < actual && actual < (center + range / 2))) && (actual !== center);
      }
    };
    return this.addMatchers(matchers);
  });

  describe("variable", function() {
    var variable;

    variable = null;
    beforeEach(function() {
      return variable = new Variable();
    });
    afterEach(function() {
      return variable = null;
    });
    it("should create a varable correctly", function() {
      expect(variable).toBeDefined();
      expect(variable.get('c')).toEqual(1e-7);
      expect(variable.get('a')).toEqual(0.0001);
      expect(variable.get('v')).toEqual(0.01);
      return expect(variable.get('d')).toEqual(1);
    });
    it("should create a varable correctly when overriding defaults", function() {
      var variable1;

      variable1 = new Variable({
        'd': 4,
        'v': 3,
        'a': 2,
        'c': 1
      });
      expect(variable1.get('c')).toEqual(1);
      expect(variable1.get('a')).toEqual(2);
      expect(variable1.get('v')).toEqual(3);
      return expect(variable1.get('d')).toEqual(4);
    });
    return it("should mutate a varable correctly", function() {
      expect(variable.mutate).toBeDefined();
      expect(variable.get('c')).toEqual(1e-7);
      expect(variable.get('a')).toEqual(0.0001);
      expect(variable.get('v')).toEqual(0.01);
      expect(variable.get('d')).toEqual(1);
      variable.mutate();
      expect(variable.get('a')).toBeBetween(0.0001, 1e-7);
      expect(variable.get('v')).toBeBetween(0.01, 0.0001);
      return expect(variable.get('d')).toBeBetween(1, 0.01);
    });
  });

  describe("node", function() {
    var node;

    node = null;
    beforeEach(function() {
      return node = new Node();
    });
    afterEach(function() {
      return node = null;
    });
    it("should be defined when created", function() {
      expect(node).toBeDefined();
      expect(node.get('position')).toBeDefined();
      return expect(node.get('type')).toBeDefined();
    });
    it("should be initialized", function() {
      node.get('position')[0].mutate();
      node.get('position')[1].mutate();
      node.get('position')[0].get('d');
      expect(node.get('position')[0].get('d')).toBeBetween(1, 0.01);
      expect(node.get('position')[1].get('d')).toBeBetween(1, 0.01);
      return expect(node.get('type')).toEqual('regular');
    });
    it("should update position with parameters", function() {
      var node1;

      node1 = new Node({
        'position': [
          new Variable({
            'd': 2,
            'v': 3
          }), new Variable({
            'd': 3
          })
        ]
      });
      node1.get('position')[0].mutate();
      node1.get('position')[1].mutate();
      expect(node1.get('position')[0].get('d')).toBeBetween(2, 3);
      return expect(node1.get('position')[1].get('d')).toBeBetween(3, 0.01);
    });
    return it("should update type with parameter", function() {
      var node1;

      node1 = new Node({
        'type': 'sensor'
      });
      return expect(node1.get('type')).toEqual('sensor');
    });
  });

}).call(this);
