// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";
  var expect;

  expect = chai.expect;

  describe('Variable', function() {
    var variable;

    variable = null;
    beforeEach(function() {
      return variable = new Variable();
    });
    afterEach(function() {
      return variable = null;
    });
    it("should create a varable correctly", function() {
      expect(variable).to.exist;
      expect(variable.get('c')).is.equal(0.0000001);
      expect(variable.get('a')).is.equal(0.0001);
      expect(variable.get('v')).is.equal(0.01);
      return expect(variable.get('d')).is.equal(0.05);
    });
    it("should create a varable correctly when overriding defaults", function() {
      var variable1;

      variable1 = new Variable({
        'd': 4,
        'v': 3,
        'a': 2,
        'c': 1
      });
      expect(variable1.get('c')).is.equal(1);
      expect(variable1.get('a')).is.equal(2);
      expect(variable1.get('v')).is.equal(3);
      return expect(variable1.get('d')).is.equal(4);
    });
    it("should be able to mutate", function() {
      variable.mutate();
      expect(variable.get('a')).is.above(0.0001 - 0.0000001).and.below(0.0001 + 0.0000001).and.is.not.equal(0.0001);
      expect(variable.get('v')).is.above(0.01 - 0.0001).and.below(0.01 + 0.0001).and.is.not.equal(0.01);
      return expect(variable.get('d')).is.above(0.05 - 0.01).and.below(0.05 + 0.01).and.is.not.equal(0.5);
    });
    return it("should be able to create custom variables with JSON, will be needed for persistanse later");
  });

  describe("Brain", function() {
    return describe("initialize", function() {
      var brain;

      brain = null;
      beforeEach(function() {
        return brain = new Brain();
      });
      afterEach(function() {
        return brain = null;
      });
      it("should be defined when created", function() {
        return expect(brain).to.exist;
      });
      it("should create Health Points", function() {
        expect(brain.get('healthPoints')).to.exist;
        return expect(brain.get('healthPoints')).is.equal(20);
      });
      it("should create custom Health Points", function() {
        var brain1;

        brain1 = new Brain({
          'healthPoints': 100
        });
        return expect(brain1.get('healthPoints')).is.equal(100);
      });
      it("should add health points", function() {
        brain.addHealth(5);
        return expect(brain.get('healthPoints')).is.equal(25);
      });
      it("should subtract health points", function() {
        brain.subtractHealth(5);
        return expect(brain.get('healthPoints')).is.equal(15);
      });
      describe("seeFoodConnectionUtility", function() {
        it("should create seeFoodConnectionUtility Node", function() {
          return expect(brain.get('seeFoodConnectionUtility')).to.exist;
        });
        it("should create seeFoodConnectionUtility Node with variables", function() {
          return expect(brain.get('seeFoodConnectionUtility')[0]).to.exist;
        });
        it("should create sensory node with variable", function() {
          return expect(brain.get('seeFoodConnectionUtility')[0].get('d')).is.above(0.05 - 0.01).and.below(0.05 + 0.01).and.is.not.equal(0.05);
        });
        return it("should create sensory node with variable trough parameters", function() {
          var brain1;

          brain1 = new Brain({
            'seeFoodConnectionUtility': [
              {
                'd': 4,
                'v': 1
              }, {
                'd': 6,
                'v': 2
              }
            ]
          });
          expect(brain1.get('seeFoodConnectionUtility')[0].get('d')).is.above(4 - 1).and.below(4 + 1).and.is.not.equal(4);
          return expect(brain1.get('seeFoodConnectionUtility')[1].get('d')).is.above(6 - 2).and.below(6 + 2).and.is.not.equal(6);
        });
      });
      describe("seeFoodConnectionProbabilities", function() {
        it("should create seeFoodConnectionProbabilities", function() {
          return expect(brain.get('seeFoodConnectionProbabilities')).to.exist;
        });
        it("should create seeFoodConnectionProbabilities with full parameters", function() {
          var brain2;

          brain2 = new Brain({
            'seeFoodConnectionProbabilities': [0.2, 0.8]
          });
          expect(brain2.get('seeFoodConnectionProbabilities')[0]).is.below(0.35);
          return expect(brain2.get('seeFoodConnectionProbabilities')[1]).is.above(0.65);
        });
        return it("should mutate Utility and Probabilities on mutate()", function() {
          var varP0, varP1, varU0, varU1;

          varU0 = brain.get('seeFoodConnectionUtility')[0].get('d');
          varU1 = brain.get('seeFoodConnectionUtility')[1].get('d');
          varP0 = brain.get('seeFoodConnectionProbabilities')[0];
          varP1 = brain.get('seeFoodConnectionProbabilities')[1];
          brain.mutate();
          expect(brain.get('seeFoodConnectionUtility')[0].get('d')).is.not.equal(varU0);
          expect(brain.get('seeFoodConnectionUtility')[1].get('d')).is.not.equal(varU1);
          expect(brain.get('seeFoodConnectionProbabilities')[0]).is.not.equal(varP0);
          return expect(brain.get('seeFoodConnectionProbabilities')[1]).is.not.equal(varP1);
        });
      });
      return describe("act", function() {
        return it("should work", function() {
          return expect(brain.act()).to.match(/^eat$|^do not eat$/);
        });
      });
    });
  });

  describe("Environment", function() {
    var environment;

    environment = null;
    beforeEach(function() {
      return environment = new Environment();
    });
    afterEach(function() {
      return environment = null;
    });
    it('should exist', function() {
      return expect(environment).to.exist;
    });
    it('should create agents', function() {
      return expect(environment.get('agents')).to.exist;
    });
    it('should be able to use spawn with no params', function() {
      var spy;

      spy = sinon.spy(environment, "spawnAgent");
      environment.spawnAgent();
      expect(spy.called).is["true"];
      return expect(environment.get('agents').length).to.equal(1);
    });
    return describe('spawn', function() {
      beforeEach(function() {
        return environment.spawnAgent({
          'seeFoodConnectionUtility': [
            {
              'd': 0.1,
              'v': 0.1
            }, {
              'd': 0.1,
              'v': 0.1
            }
          ],
          'seeFoodConnectionProbabilities': [0.2, 0.8],
          'healthPoints': 25
        });
      });
      it('should create new agent', function() {
        return expect(environment.get('agents').length).to.equal(1);
      });
      it('should update healthPoints', function() {
        return expect(environment.get('agents').at(0).get('healthPoints')).is.equal(25);
      });
      it('should update seeFoodConnectionUtility', function() {
        return expect(environment.get('agents').at(0).get('seeFoodConnectionUtility')[0].get('d')).is.above(0.1 - 0.11).and.below(0.1 + 0.1).and.is.not.equal(0.1);
      });
      it('should update seeFoodConnectionProbabilities', function() {
        debugger;        console.log(environment);
        expect(environment.get('agents').at(0).get('seeFoodConnectionProbabilities')[0]).is.below(0.35);
        return expect(environment.get('agents').at(0).get('seeFoodConnectionProbabilities')[1]).is.above(0.65);
      });
      return it('should not create new agents after population cap', function() {
        var index, _i;

        for (index = _i = 1; _i <= 7; index = ++_i) {
          environment.spawnAgent();
        }
        return expect(environment.get('agents').length).to.equal(5);
      });
    });
  });

}).call(this);
