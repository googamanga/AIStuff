// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      this.redeal = __bind(this.redeal, this);
      this.playerWins = __bind(this.playerWins, this);
      this.dealerWins = __bind(this.dealerWins, this);
      this.checkWhoWins = __bind(this.checkWhoWins, this);
      this.dealerLogic = __bind(this.dealerLogic, this);
      this.bindListeners = __bind(this.bindListeners, this);
      this.initialize = __bind(this.initialize, this);      _ref = App.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    App.prototype.initialize = function() {
      var deck;

      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('playerScore', null);
      this.set('playerWins', 0);
      this.set('dealerHand', deck.dealDealer());
      this.set('dealerScore', null);
      this.set('dealerWins', 0);
      return this.bindListeners();
    };

    App.prototype.bindListeners = function() {
      this.get('playerHand').on("stand bust", this.dealerLogic);
      this.get('dealerHand').on("hit", this.dealerLogic);
      return this.get('dealerHand').on("stand bust", this.checkWhoWins);
    };

    App.prototype.dealerLogic = function() {
      console.log('dealerLogic');
      if (this.get('dealerHand').at(0).get('revealed') === false) {
        this.get('dealerHand').at(0).flip();
      }
      this.dealerScore = this.get('dealerHand').scores();
      console.log(this.dealerScore);
      this.playerScore = this.get('playerHand').scores();
      console.log(this.playerScore);
      console.log("dealer score:", this.dealerScore, "player score:", this.playerScore);
      if (this.dealerScore <= 17) {
        console.log('dealer hits');
        return this.get('dealerHand').hit();
      } else if (this.dealerScore <= 21 && this.playerScore > this.dealerScore) {
        console.log('dealer hits');
        return this.get('dealerHand').hit();
      } else {
        console.log('dealer stands');
        return this.get('dealerHand').stand();
      }
    };

    App.prototype.checkWhoWins = function() {
      console.log('checking who won');
      if (this.playerScore > 21) {
        return this.dealerWins();
      } else if (this.dealerScore <= 21 && this.playerScore >= 21) {
        console.log(1);
        return this.dealerWins();
      } else if (this.playerScore <= 21 && this.dealerScore > 21) {
        console.log(2);
        return this.playerWins();
      } else if (this.dealerScore >= this.playerScore) {
        console.log(3);
        return this.dealerWins();
      } else {
        return this.playerWins();
      }
    };

    App.prototype.dealerWins = function() {
      this.set('dealerWins', this.get('dealerWins') + 1);
      console.log('Dealer WINS!');
      console.log("dealer score:", this.dealerScore, "player score:", this.playerScore);
      console.log("dealerWins: ", this.get('dealerWins'), ", playerWins:", this.get('playerWins'));
      return setTimeout(this.redeal, 2000);
    };

    App.prototype.playerWins = function() {
      this.set('playerWins', this.get('playerWins') + 1);
      console.log('Player WINS!');
      console.log("dealer score:", this.dealerScore, "player score:", this.playerScore);
      console.log("dealerWins: ", this.get('dealerWins'), ", playerWins:", this.get('playerWins'));
      return setTimeout(this.redeal, 2000);
    };

    App.prototype.redeal = function() {
      var deck;

      console.log('redeal');
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      return this.bindListeners();
    };

    return App;

  })(Backbone.Model);

}).call(this);
