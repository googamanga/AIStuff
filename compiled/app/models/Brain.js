// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Brain = (function(_super) {
    __extends(Brain, _super);

    function Brain() {
      _ref = Brain.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Brain.prototype.initialize = function() {
      var error;

      if (arguments.length && arguments[0]['seeFoodNode']) {
        try {
          this.set('seeFoodNode', [new Variable(arguments[0]['seeFoodNode'][0]), new Variable(arguments[0]['seeFoodNode'][1])]);
        } catch (_error) {
          error = _error;
          console.log(error, "can't @set seeFoodNode inside: ", this);
        }
      } else {
        this.set('seeFoodNode', [new Variable(), new Variable()]);
      }
      this.mutate();
      return this.set('healthPoints', arguments.length && arguments[0]['healthPoints'] ? arguments[0]['healthPoints'] : 20);
    };

    Brain.prototype.mutate = function() {
      this.get('seeFoodNode')[0].mutate();
      return this.get('seeFoodNode')[1].mutate();
    };

    Brain.prototype.addHealth = function(num) {
      return this.set('healthPoints', this.get('healthPoints') + num);
    };

    Brain.prototype.subtractHealth = function(num) {
      return this.set('healthPoints', this.get('healthPoints') - num);
    };

    return Brain;

  })(Backbone.Model);

}).call(this);
