// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.God = (function(_super) {
    __extends(God, _super);

    function God() {
      this.mainLoop = __bind(this.mainLoop, this);      _ref = God.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    God.prototype.initialize = function() {
      this.set('env', new Environment());
      this.set('judgments', {
        'eat': +5,
        'doNotEat': -5
      });
      this.set('count', 0);
      return this.set('intervalId', setInterval(this.mainLoop, 0, this));
    };

    God.prototype.mainLoop = function() {
      var deadAgents,
        _this = this;

      while (this.get('env').get('populationLimit') > this.get('env').get('agents').length) {
        this.get('env').spawnAgent();
      }
      deadAgents = this.get('env').get('agents').filter(function(agent) {
        if (agent.act === 'eat') {
          agent.addHealth(_this.get('judgments').eat);
        } else {
          agent.subtractHealth(_this.get('judgments').doNotEat);
        }
        return agent.get('healthPoints') <= 0;
      });
      this.get('env').get('agents').remove(deadAgents);
      this.set('count', this.get('count') + 1);
      console.log('count:', this.get('count'), 'agents:', this.get('env').get('agents'));
      if (this.get('count') === 100) {
        return clearInterval(this.get('intervalId'));
      }
    };

    return God;

  })(Backbone.Model);

}).call(this);
