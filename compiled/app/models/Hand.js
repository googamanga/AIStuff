// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Hand = (function(_super) {
    __extends(Hand, _super);

    function Hand() {
      _ref = Hand.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Hand.prototype.model = Card;

    Hand.prototype.initialize = function(array, deck, isDealer) {
      this.deck = deck;
      this.isDealer = isDealer;
    };

    Hand.prototype.hit = function() {
      var card;

      card = this.deck.pop();
      this.add(card);
      if (this.scores() > 21) {
        console.log('triggered bust');
        this.trigger('bust');
      } else {
        this.trigger('hit');
      }
      return card;
    };

    Hand.prototype.stand = function() {
      console.log('triggered stand');
      return this.trigger('stand');
    };

    Hand.prototype.bust = function() {
      console.log('triggered bust');
      return this.trigger('bust');
    };

    Hand.prototype.scores = function() {
      var arrayScore, hasAce, score;

      hasAce = this.reduce(function(memo, card) {
        if (card.get('revealed')) {
          return memo || card.get('value') === 1;
        } else {
          return memo;
        }
      }, false);
      score = this.reduce(function(score, card) {
        return score + (card.get('revealed') ? card.get('value') : 0);
      }, 0);
      arrayScore = hasAce ? [score, score + 10] : [score];
      if (arrayScore.length === 2 && arrayScore[1] <= 21) {
        return arrayScore[1];
      }
      return arrayScore[0];
    };

    return Hand;

  })(Backbone.Collection);

}).call(this);
